// [[Rcpp::depends(RcppArmadillo)]]
// Generated by refresh.R;Can be recreated by refresh(derivs=TRUE) in source directory after loading RxODE by library(devtools);load_all();
#include <RcppArmadillo.h>
#include <R.h>
using namespace Rcpp;
using namespace R;
using namespace arma;
// [[Rcpp::export]]
void getLinDerivs(SEXP rho){
  Environment e = as<Environment>(rho);
  int par = as<int>(e["parameterization"]);
  int ncmt = as<int>(e["ncmp"]);
  int oral = as<int>(e["oral"]);
  double zoo = R_PosInf; // Zoo is in dV :(
if (par == 1 && ncmt == 1 && oral == 1){

  if (e.exists("V") && e.exists("CL") && e.exists("KA")){

    double V = as<double>(e["V"]);
    double CL = as<double>(e["CL"]);
    double ka = as<double>(e["KA"]);

    mat dV = mat(1, 2);
    mat dCL = mat(1, 2);
    mat dKA = mat(1, 2);

    dV(0, 0) = -CL / pow(V, 2);

    dV(0, 1) = -CL * ka / (pow(V, 3) * pow((-CL / V + ka), 2)) - ka / (pow(V, 2) * (-CL / V + ka));

    dCL(0, 0) = 1 / V;

    dCL(0, 1) = ka / (pow(V, 2) * pow((-CL / V + ka), 2));

    dKA(0, 0) = 0;

    dKA(0, 1) = -ka / (V * pow((-CL / V + ka), 2)) + 1 / (V * (-CL / V + ka));

    e["dV"] = dV;
    e["dCL"] = dCL;
    e["dKA"] = dKA;

  } else {
    stop("Some required parameters not in environment (need V, CL, KA)");
  }
}

if (par == 1 && ncmt == 1 && oral == 0){

  if (e.exists("V") && e.exists("CL")){

    double V = as<double>(e["V"]);
    double CL = as<double>(e["CL"]);

    mat dV = mat(1, 2);
    mat dCL = mat(1, 2);

    dV(0, 0) = -CL / pow(V, 2);

    dV(0, 1) = -1 / pow(V, 2);

    dCL(0, 0) = 1 / V;

    dCL(0, 1) = 0;

    e["dV"] = dV;
    e["dCL"] = dCL;

  } else {
    stop("Some required parameters not in environment (need V, CL)");
  }
}

if (par == 1 && ncmt == 2 && oral == 0){

  if (e.exists("V") && e.exists("CL") && e.exists("Q") && e.exists("V2")){

    double V = as<double>(e["V"]);
    double CL = as<double>(e["CL"]);
    double Q = as<double>(e["Q"]);
    double V2 = as<double>(e["V2"]);

    mat dV = mat(2, 2);
    mat dCL = mat(2, 2);
    mat dQ = mat(2, 2);
    mat dV2 = mat(2, 2);

    dV(1, 0) = -0.5 * CL / pow(V, 2) - 0.5 * Q / pow(V, 2) - 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2));

    dV(0, 0) = CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dV(0, 1) = (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (-CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / pow(V, 2) - 0.5 * Q / pow(V, 2) - 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + (CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))))) / (V * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) / (pow(V, 2) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dV(1, 1) = (-0.5 * CL / pow(V, 2) - 0.5 * Q / pow(V, 2) - 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (pow(V, 2) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dCL(1, 0) = -0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V;

    dCL(0, 0) = CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dCL(0, 1) = (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (-CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V) / (V * pow((CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + (CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))))) / (V * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dCL(1, 1) = (-0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2));

    dQ(1, 0) = -0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V2 + 0.5 / V;

    dQ(0, 0) = CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dQ(0, 1) = (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (-CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V2 + 0.5 / V) / (V * pow((CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + (CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 1 / V2) / (V * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dQ(1, 1) = (-0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 + 0.5 / V) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2));

    dV2(1, 0) = -0.5 * Q / pow(V2, 2) - 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2));

    dV2(0, 0) = CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dV2(0, 1) = (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (-CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * Q / pow(V2, 2) - 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + (CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + Q / pow(V2, 2)) / (V * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dV2(1, 1) = (0.5 * Q / pow(V2, 2) - 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2));

    e["dV"] = dV;
    e["dCL"] = dCL;
    e["dQ"] = dQ;
    e["dV2"] = dV2;

  } else {
    stop("Some required parameters not in environment (need V, CL, Q, V2)");
  }
}

if (par == 1 && ncmt == 2 && oral == 1){

  if (e.exists("V") && e.exists("CL") && e.exists("Q") && e.exists("V2") && e.exists("KA")){

    double V = as<double>(e["V"]);
    double CL = as<double>(e["CL"]);
    double Q = as<double>(e["Q"]);
    double V2 = as<double>(e["V2"]);
    double ka = as<double>(e["KA"]);

    mat dV = mat(2, 2);
    mat dCL = mat(2, 2);
    mat dQ = mat(2, 2);
    mat dV2 = mat(2, 2);
    mat dKA = mat(2, 2);

    dV(1, 0) = -0.5 * CL / pow(V, 2) - 0.5 * Q / pow(V, 2) - 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2));

    dV(0, 0) = CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dV(0, 1) = ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (-CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / pow(V, 2) - 0.5 * Q / pow(V, 2) - 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * pow((CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + ka * (CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))))) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))))) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka), 2) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) / (pow(V, 2) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dV(1, 1) = ka * (-0.5 * CL / pow(V, 2) - 0.5 * Q / pow(V, 2) - 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (-0.5 * CL / pow(V, 2) - 0.5 * Q / pow(V, 2) - 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (CL * Q * (0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (pow(V, 2) * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / pow(V, 2) + 0.5 * Q / pow(V, 2) + 0.5 * (2 * CL * Q / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - ka * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (pow(V, 2) * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dCL(1, 0) = -0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V;

    dCL(0, 0) = CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dCL(0, 1) = ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (-CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * pow((CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + ka * (CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))))) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))))) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka), 2) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dCL(1, 1) = ka * (-0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V) * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (-0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (CL * Q * (0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * (-2 * Q / (V * V2) + (CL / V + Q / V2 + Q / V) / V) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2));

    dQ(1, 0) = -0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V2 + 0.5 / V;

    dQ(0, 0) = CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dQ(0, 1) = ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (-CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V2 + 0.5 / V) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * pow((CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + ka * (CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 1 / V2) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))))) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka), 2) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dQ(1, 1) = ka * (-0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 + 0.5 / V) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (-0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) + 0.5 / V2 + 0.5 / V) * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (CL * Q * (0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * (-2 * CL / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V) / 2) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)) - 0.5 / V2 - 0.5 / V) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2));

    dV2(1, 0) = -0.5 * Q / pow(V2, 2) - 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2));

    dV2(0, 0) = CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dV2(0, 1) = ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (-CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * Q / pow(V2, 2) - 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * pow((CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) + ka * (CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + Q / pow(V2, 2)) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) * (CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))))) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka), 2) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dV2(1, 1) = ka * (-0.5 * Q / pow(V2, 2) - 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (0.5 * Q / pow(V2, 2) - 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (CL * Q * (0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * V2 * pow((0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2)) - CL * Q / (V * pow(V2, 2) * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * Q / pow(V2, 2) + 0.5 * (2 * CL * Q / (V * pow(V2, 2)) - Q * (CL / V + Q / V2 + Q / V) / pow(V2, 2)) / sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2));

    dKA(1, 0) = 0;

    dKA(0, 0) = 0;

    dKA(0, 1) = -ka * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) / (V * pow((-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka), 2) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - Q / V2) / (V * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + ka) * (CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    dKA(1, 1) = -ka * (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))), 2) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / V2 - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))) * (-CL * Q / (V * V2 * (0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / V2 + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * V2) + pow((CL / V + Q / V2 + Q / V), 2))));

    e["dV"] = dV;
    e["dCL"] = dCL;
    e["dQ"] = dQ;
    e["dV2"] = dV2;
    e["dKA"] = dKA;

  } else {
    stop("Some required parameters not in environment (need V, CL, Q, V2, KA)");
  }
}

if (par == 1 && ncmt == 3 && oral == 0){

  if (e.exists("V") && e.exists("CL") && e.exists("Q") && e.exists("V2") && e.exists("Q2") && e.exists("V3")){

    double V = as<double>(e["V"]);
    double CL = as<double>(e["CL"]);
    double Q = as<double>(e["Q"]);
    double V2 = as<double>(e["V2"]);
    double Q2 = as<double>(e["Q2"]);
    double V3 = as<double>(e["V3"]);

    mat dV = mat(3, 2);
    mat dCL = mat(3, 2);
    mat dQ = mat(3, 2);
    mat dV2 = mat(3, 2);
    mat dQ2 = mat(3, 2);
    mat dV3 = mat(3, 2);

    dV(0, 0) = -CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV(1, 0) = -CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV(2, 0) = -CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV(0, 1) = zoo * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + zoo * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (pow(V, 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3));

    dV(1, 1) = zoo * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + zoo * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (pow(V, 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3));

    dV(2, 1) = (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3)) - (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * pow(V, 2) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dCL(0, 0) = -2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V);

    dCL(1, 0) = -2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V);

    dCL(2, 0) = 2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V);

    dCL(0, 1) = zoo * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dCL(1, 1) = zoo * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dCL(2, 1) = (-2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + (-2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dQ(0, 0) = -2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V);

    dQ(1, 0) = -2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V);

    dQ(2, 0) = 2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V);

    dQ(0, 1) = zoo * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dQ(1, 1) = zoo * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dQ(2, 1) = (-2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + (-2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dV2(0, 0) = -Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV2(1, 0) = -Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV2(2, 0) = -Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV2(0, 1) = zoo * (-2 * Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dV2(1, 1) = zoo * (-2 * Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dV2(2, 1) = (-2 * Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + (Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dQ2(0, 0) = -2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V);

    dQ2(1, 0) = -2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V);

    dQ2(2, 0) = 2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V);

    dQ2(0, 1) = zoo * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dQ2(1, 1) = zoo * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dQ2(2, 1) = (-2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + (-2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dV3(0, 0) = -Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV3(1, 0) = -Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV3(2, 0) = -Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV3(0, 1) = zoo * (-2 * Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dV3(1, 1) = zoo * (-2 * Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dV3(2, 1) = (-2 * Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + (Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    e["dV"] = dV;
    e["dCL"] = dCL;
    e["dQ"] = dQ;
    e["dV2"] = dV2;
    e["dQ2"] = dQ2;
    e["dV3"] = dV3;

  } else {
    stop("Some required parameters not in environment (need V, CL, Q, V2, Q2, V3)");
  }
}

if (par == 1 && ncmt == 3 && oral == 1){

  if (e.exists("V") && e.exists("CL") && e.exists("Q") && e.exists("V2") && e.exists("Q2") && e.exists("V3") && e.exists("KA")){

    double V = as<double>(e["V"]);
    double CL = as<double>(e["CL"]);
    double Q = as<double>(e["Q"]);
    double V2 = as<double>(e["V2"]);
    double Q2 = as<double>(e["Q2"]);
    double V3 = as<double>(e["V3"]);
    double ka = as<double>(e["KA"]);

    mat dV = mat(3, 2);
    mat dCL = mat(3, 2);
    mat dQ = mat(3, 2);
    mat dV2 = mat(3, 2);
    mat dQ2 = mat(3, 2);
    mat dV3 = mat(3, 2);
    mat dKA = mat(3, 2);

    dV(0, 0) = -CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV(1, 0) = -CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV(2, 0) = -CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV(0, 1) = zoo * ka * (-CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + zoo * ka * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (pow(V, 2) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3));

    dV(1, 1) = zoo * ka * (-CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + zoo * ka * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (pow(V, 2) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3));

    dV(2, 1) = ka * (-CL / (3 * pow(V, 2)) - Q / (3 * pow(V, 2)) - Q2 / (3 * pow(V, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (CL / (3 * pow(V, 2)) + Q / (3 * pow(V, 2)) + Q2 / (3 * pow(V, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-2 * CL * Q / (pow(V, 2) * V2) - 2 * CL * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V3) - 2 * Q * Q2 / (pow(V, 2) * V2) - 2 * (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (pow(V, 2) * V2) + CL * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V3) + Q * Q2 / (pow(V, 2) * V2) + (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (pow(V, 2) * V2 * V3) - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (-2 * CL / pow(V, 2) - 2 * Q / pow(V, 2) - 2 * Q2 / pow(V, 2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (-CL / pow(V, 2) - Q / pow(V, 2) - Q2 / pow(V, 2)) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 + (-CL * Q / (pow(V, 2) * V2) - CL * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V3) - Q * Q2 / (pow(V, 2) * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3)) - ka * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * pow(V, 2) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dCL(0, 0) = -2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V);

    dCL(1, 0) = -2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V);

    dCL(2, 0) = 2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V);

    dCL(0, 1) = zoo * ka * (-2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dCL(1, 1) = zoo * ka * (-2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dCL(2, 1) = ka * (-2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (-2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (2 * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-Q / (V * V2) - Q2 / (V * V3) + 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * Q / (V * V2) + 2 * Q2 / (V * V3) - 4 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * V)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-Q * Q2 / (V * V2 * V3) + (Q / (V * V2) + Q2 / (V * V3)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3 - 2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * V) - 2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * V) + (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * V)) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dQ(0, 0) = -2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V);

    dQ(1, 0) = -2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V);

    dQ(2, 0) = 2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V);

    dQ(0, 1) = zoo * ka * (-2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dQ(1, 1) = zoo * ka * (-2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dQ(2, 1) = ka * (-2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (-2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V2) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V2) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-CL / (V * V2) - Q2 / (V2 * V3) - Q2 / (V * V3) - Q2 / (V * V2) + (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V2) + 2 * Q2 / (V2 * V3) + 2 * Q2 / (V * V3) + 2 * Q2 / (V * V2) - 2 * (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q2 / (V * V2 * V3) + (1 / V2 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V2 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V2 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V2) + Q2 / (V2 * V3) + Q2 / (V * V3) + Q2 / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dV2(0, 0) = -Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV2(1, 0) = -Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV2(2, 0) = -Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV2(0, 1) = zoo * ka * (-2 * Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (-Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dV2(1, 1) = zoo * ka * (-2 * Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (-Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dV2(2, 1) = ka * (-2 * Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (-Q / (3 * pow(V2, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (Q / (3 * pow(V2, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-2 * CL * Q / (V * pow(V2, 2)) - 2 * Q * Q2 / (pow(V2, 2) * V3) - 2 * Q * Q2 / (V * pow(V2, 2)) + 4 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q / (V * pow(V2, 2)) + Q * Q2 / (pow(V2, 2) * V3) + Q * Q2 / (V * pow(V2, 2)) - 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V2, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * pow(V2, 2) * V3) + 2 * Q * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V2, 2)) + 2 * Q * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V2, 2)) - Q * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V2, 2)) + (-CL * Q / (V * pow(V2, 2)) - Q * Q2 / (pow(V2, 2) * V3) - Q * Q2 / (V * pow(V2, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dQ2(0, 0) = -2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V);

    dQ2(1, 0) = -2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V);

    dQ2(2, 0) = 2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V);

    dQ2(0, 1) = zoo * ka * (-2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dQ2(1, 1) = zoo * ka * (-2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dQ2(2, 1) = ka * (-2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) - 1 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (-2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 2 / (3 * V3) - 1 / (3 * V)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (2 * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1)) + 1 / (3 * V3) + 1 / (3 * V)) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-CL / (V * V3) - Q / (V2 * V3) - Q / (V * V3) - Q / (V * V2) + (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2 - (2 * CL / (V * V3) + 2 * Q / (V2 * V3) + 2 * Q / (V * V3) + 2 * Q / (V * V2) - 2 * (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (-CL * Q / (V * V2 * V3) + (1 / V3 + 1 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3 - (2 / V3 + 2 / V) * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 27 - (2 / V3 + 2 / V) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / (V * V3) + Q / (V2 * V3) + Q / (V * V3) + Q / (V * V2)) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dV3(0, 0) = -Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV3(1, 0) = -Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV3(2, 0) = -Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1));

    dV3(0, 1) = zoo * ka * (-2 * Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (-Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dV3(1, 1) = zoo * ka * (-2 * Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (-Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    dV3(2, 1) = ka * (-2 * Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (-Q2 / (3 * pow(V3, 2)) + 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + ka * (Q2 / (3 * pow(V3, 2)) - 2 * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-2 * CL * Q2 / (V * pow(V3, 2)) - 2 * Q * Q2 / (V2 * pow(V3, 2)) - 2 * Q * Q2 / (V * pow(V3, 2)) + 4 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) / 2 - (CL * Q2 / (V * pow(V3, 2)) + Q * Q2 / (V2 * pow(V3, 2)) + Q * Q2 / (V * pow(V3, 2)) - 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / (3 * pow(V3, 2))) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2) / 2) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 3 * sqrt(3) * (CL * Q * Q2 / (V * V2 * pow(V3, 2)) + 2 * Q2 * pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / (27 * pow(V3, 2)) + 2 * Q2 * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / (27 * pow(V3, 2)) - Q2 * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / (3 * pow(V3, 2)) + (-CL * Q2 / (V * pow(V3, 2)) - Q * Q2 / (V2 * pow(V3, 2)) - Q * Q2 / (V * pow(V3, 2))) * (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3), 2) / (4 * (-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)) + 1) * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 3));

    dKA(0, 0) = 0;

    dKA(1, 0) = 0;

    dKA(2, 0) = 0;

    dKA(0, 1) = zoo * ka * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3));

    dKA(1, 1) = zoo * ka * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) + zoo * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka + 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3));

    dKA(2, 1) = -ka * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * pow((-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2)) + (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) + 2 * Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * (-CL / (3 * V) + 2 * Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) / (16 * V * (-CL / (3 * V) - Q / (3 * V2) - Q / (3 * V) - Q2 / (3 * V3) - Q2 / (3 * V) + ka - 2 * cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-CL * Q * Q2 / (V * V2 * V3) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) * (2 * CL / V + 2 * Q / V2 + 2 * Q / V + 2 * Q2 / V3 + 2 * Q2 / V) / 27 + (CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V) * (CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2)) / 3) / (2 * sqrt((-CL * Q / (V * V2) - CL * Q2 / (V * V3) - Q * Q2 / (V2 * V3) - Q * Q2 / (V * V3) - Q * Q2 / (V * V2) + pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3) * pow((CL * Q / (V * V2) + CL * Q2 / (V * V3) + Q * Q2 / (V2 * V3) + Q * Q2 / (V * V3) + Q * Q2 / (V * V2) - pow((CL / V + Q / V2 + Q / V + Q2 / V3 + Q2 / V), 2) / 3), 2)))) / 3), 2));

    e["dV"] = dV;
    e["dCL"] = dCL;
    e["dQ"] = dQ;
    e["dV2"] = dV2;
    e["dQ2"] = dQ2;
    e["dV3"] = dV3;
    e["dKA"] = dKA;

  } else {
    stop("Some required parameters not in environment (need V, CL, Q, V2, Q2, V3, KA)");
  }
}

if (par == 2 && ncmt == 1 && oral == 1){

  if (e.exists("V") && e.exists("K") && e.exists("KA")){

    double V = as<double>(e["V"]);
    double k = as<double>(e["K"]);
    double ka = as<double>(e["KA"]);

    mat dV = mat(1, 2);
    mat dK = mat(1, 2);
    mat dKA = mat(1, 2);

    dV(0, 0) = 0;

    dV(0, 1) = -ka / (pow(V, 2) * (-k + ka));

    dK(0, 0) = 1;

    dK(0, 1) = ka / (V * pow((-k + ka), 2));

    dKA(0, 0) = 0;

    dKA(0, 1) = -ka / (V * pow((-k + ka), 2)) + 1 / (V * (-k + ka));

    e["dV"] = dV;
    e["dK"] = dK;
    e["dKA"] = dKA;

  } else {
    stop("Some required parameters not in environment (need V, K, KA)");
  }
}

if (par == 2 && ncmt == 1 && oral == 0){

  if (e.exists("V") && e.exists("K")){

    double V = as<double>(e["V"]);
    double k = as<double>(e["K"]);

    mat dV = mat(1, 2);
    mat dK = mat(1, 2);

    dV(0, 0) = 0;

    dV(0, 1) = -1 / pow(V, 2);

    dK(0, 0) = 1;

    dK(0, 1) = 0;

    e["dV"] = dV;
    e["dK"] = dK;

  } else {
    stop("Some required parameters not in environment (need V, K)");
  }
}

if (par == 2 && ncmt == 2 && oral == 0){

  if (e.exists("V") && e.exists("K12") && e.exists("K21") && e.exists("K")){

    double V = as<double>(e["V"]);
    double k12 = as<double>(e["K12"]);
    double k21 = as<double>(e["K21"]);
    double k = as<double>(e["K"]);

    mat dV = mat(2, 2);
    mat dK12 = mat(2, 2);
    mat dK21 = mat(2, 2);
    mat dK = mat(2, 2);

    dV(1, 0) = 0;

    dV(0, 0) = 0;

    dV(0, 1) = -(k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) / (pow(V, 2) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dV(1, 1) = -(0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (pow(V, 2) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dK12(1, 0) = 0.5 - 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2));

    dK12(0, 0) = k * k21 * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2);

    dK12(0, 1) = k * k21 * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) * (-k * k21 * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + 0.5 - 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2));

    dK12(1, 1) = (0.5 - 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + (k * k21 * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) - 0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2));

    dK21(1, 0) = 0.5 - 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2));

    dK21(0, 0) = k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)));

    dK21(0, 1) = (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) * (-k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) - k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 - 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2)) + (k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 1) / (V * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dK21(1, 1) = (-0.5 - 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2));

    dK(1, 0) = 0.5 - 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2));

    dK(0, 0) = k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)));

    dK(0, 1) = (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) * (-k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) - k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 - 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2)) + (k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) / (V * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dK(1, 1) = (0.5 - 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2));

    e["dV"] = dV;
    e["dK12"] = dK12;
    e["dK21"] = dK21;
    e["dK"] = dK;

  } else {
    stop("Some required parameters not in environment (need V, K12, K21, K)");
  }
}

if (par == 2 && ncmt == 2 && oral == 1){

  if (e.exists("V") && e.exists("K12") && e.exists("K21") && e.exists("K") && e.exists("KA")){

    double V = as<double>(e["V"]);
    double k12 = as<double>(e["K12"]);
    double k21 = as<double>(e["K21"]);
    double k = as<double>(e["K"]);
    double ka = as<double>(e["KA"]);

    mat dV = mat(2, 2);
    mat dK12 = mat(2, 2);
    mat dK21 = mat(2, 2);
    mat dK = mat(2, 2);
    mat dKA = mat(2, 2);

    dV(1, 0) = 0;

    dV(0, 0) = 0;

    dV(0, 1) = -ka * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) / (pow(V, 2) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dV(1, 1) = -ka * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (pow(V, 2) * (-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dK12(1, 0) = 0.5 - 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2));

    dK12(0, 0) = k * k21 * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2);

    dK12(0, 1) = k * k21 * ka * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka) * pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + k * k21 * ka * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) / (V * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka), 2) * pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) * (-k * k21 * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + 0.5 - 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka) * pow((k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2));

    dK12(1, 1) = ka * (0.5 - 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (0.5 - 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (k * k21 * (-0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) - 0.5 + 0.5 * (k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2));

    dK21(1, 0) = 0.5 - 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2));

    dK21(0, 0) = k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)));

    dK21(0, 1) = ka * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) * (-k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) - k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 - 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka) * pow((k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2)) + ka * (k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 1) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) * (k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) / (V * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka), 2) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dK21(1, 1) = ka * (-0.5 - 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (0.5 - 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (k * k21 * (-0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 + 0.5 * (-k + k12 + k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2));

    dK(1, 0) = 0.5 - 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2));

    dK(0, 0) = k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)));

    dK(0, 1) = ka * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) * (-k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) - k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 - 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka) * pow((k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2)) + ka * (k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) * (k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) / (V * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka), 2) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dK(1, 1) = ka * (0.5 - 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (0.5 - 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + ka * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (k * k21 * (-0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / pow((0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) + k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 + 0.5 * (k + k12 - k21) / sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2));

    dKA(1, 0) = 0;

    dKA(0, 0) = 0;

    dKA(0, 1) = -ka * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) / (V * pow((-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka), 2) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - k21) / (V * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + ka) * (k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) - 0.5 * k - 0.5 * k12 - 0.5 * k21 + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    dKA(1, 1) = -ka * (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * pow((-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))), 2) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2)))) + (0.5 * k + 0.5 * k12 - 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) / (V * (-0.5 * k - 0.5 * k12 - 0.5 * k21 + ka + 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) * (-k * k21 / (0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))) + 0.5 * k + 0.5 * k12 + 0.5 * k21 - 0.5 * sqrt(-4 * k * k21 + pow((k + k12 + k21), 2))));

    e["dV"] = dV;
    e["dK12"] = dK12;
    e["dK21"] = dK21;
    e["dK"] = dK;
    e["dKA"] = dKA;

  } else {
    stop("Some required parameters not in environment (need V, K12, K21, K, KA)");
  }
}

if (par == 2 && ncmt == 3 && oral == 0){

  if (e.exists("V") && e.exists("K") && e.exists("K21") && e.exists("K31") && e.exists("K13") && e.exists("K12")){

    double V = as<double>(e["V"]);
    double k = as<double>(e["K"]);
    double k21 = as<double>(e["K21"]);
    double k31 = as<double>(e["K31"]);
    double k13 = as<double>(e["K13"]);
    double k12 = as<double>(e["K12"]);

    mat dV = mat(3, 2);
    mat dK = mat(3, 2);
    mat dK21 = mat(3, 2);
    mat dK31 = mat(3, 2);
    mat dK13 = mat(3, 2);
    mat dK12 = mat(3, 2);

    dV(0, 0) = 0;

    dV(1, 0) = 0;

    dV(2, 0) = 0;

    dV(0, 1) = zoo * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (pow(V, 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3));

    dV(1, 1) = zoo * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (pow(V, 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3));

    dV(2, 1) = -(-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * pow(V, 2) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK(0, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK(1, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK(2, 1) = (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dK21(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK21(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK21(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK21(0, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (2 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK21(1, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (2 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK21(2, 1) = (-1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + (2 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dK31(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK31(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK31(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK31(0, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (2 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK31(1, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (2 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK31(2, 1) = (-1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + (2 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dK13(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK13(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK13(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK13(0, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK13(1, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK13(2, 1) = (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dK12(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK12(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK12(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK12(0, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK12(1, 1) = zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK12(2, 1) = (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    e["dV"] = dV;
    e["dK"] = dK;
    e["dK21"] = dK21;
    e["dK31"] = dK31;
    e["dK13"] = dK13;
    e["dK12"] = dK12;

  } else {
    stop("Some required parameters not in environment (need V, K, K21, K31, K13, K12)");
  }
}

if (par == 2 && ncmt == 3 && oral == 1){

  if (e.exists("V") && e.exists("K") && e.exists("K21") && e.exists("K31") && e.exists("K13") && e.exists("K12") && e.exists("KA")){

    double V = as<double>(e["V"]);
    double k = as<double>(e["K"]);
    double k21 = as<double>(e["K21"]);
    double k31 = as<double>(e["K31"]);
    double k13 = as<double>(e["K13"]);
    double k12 = as<double>(e["K12"]);
    double ka = as<double>(e["KA"]);

    mat dV = mat(3, 2);
    mat dK = mat(3, 2);
    mat dK21 = mat(3, 2);
    mat dK31 = mat(3, 2);
    mat dK13 = mat(3, 2);
    mat dK12 = mat(3, 2);
    mat dKA = mat(3, 2);

    dV(0, 0) = 0;

    dV(1, 0) = 0;

    dV(2, 0) = 0;

    dV(0, 1) = zoo * ka * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (pow(V, 2) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3));

    dV(1, 1) = zoo * ka * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (pow(V, 2) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3));

    dV(2, 1) = -ka * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * pow(V, 2) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK(0, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK(1, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK(2, 1) = ka * (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 - 2 * k21 * k31 / 3 + (k21 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dK21(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK21(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK21(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK21(0, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (2 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK21(1, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (2 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK21(2, 1) = ka * (-1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (2 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-k / 3 + 2 * k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 - 4 * k12 / 3 + 2 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 - 2 * k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k13 + k31) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dK31(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK31(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK31(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK31(0, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (2 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK31(1, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (2 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK31(2, 1) = ka * (-1 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (1 / 3 + 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (2 / 3 - 2 * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-k / 3 - k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2 - (2 * k / 3 + 2 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (-2 * k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + (k + k12 + k21) * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dK13(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK13(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK13(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK13(0, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK13(1, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK13(2, 1) = ka * (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 + 2 * k21 / 3 - 4 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 - k21 / 3 + 2 * k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k21 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dK12(0, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK12(1, 0) = 1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK12(2, 0) = 1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1));

    dK12(0, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK12(1, 1) = zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (-1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    dK12(2, 1) = ka * (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (-1 / 3 - 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + ka * (1 / 3 + 2 * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (3 * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) - ka * (3 * sqrt(3) * (-(-4 * k / 3 - 4 * k12 / 3 - 4 * k13 / 3 - 4 * k21 / 3 + 2 * k31 / 3) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3) / 2 - (2 * k / 3 + 2 * k12 / 3 + 2 * k13 / 3 + 2 * k21 / 3 - k31 / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2) / 2) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 3 * sqrt(3) * (k * k21 / 3 + k * k31 / 3 + k12 * k31 / 3 + k13 * k21 / 3 + k21 * k31 / 3 + k31 * (k + k12 + k13 + k21 + k31) / 3 - 2 * pow((k + k12 + k13 + k21 + k31), 2) / 27 - pow((2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31), 2) / 27) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * sin(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3) / (24 * V * sqrt(-27 * pow((-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3), 2) / (4 * (-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)) + 1) * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 3));

    dKA(0, 0) = 0;

    dKA(1, 0) = 0;

    dKA(2, 0) = 0;

    dKA(0, 1) = zoo * ka * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3));

    dKA(1, 1) = zoo * ka * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) + zoo * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka + 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3));

    dKA(2, 1) = -ka * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * pow((-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)), 2) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2)) + (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 + 2 * k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * (-k / 3 - k12 / 3 - k13 / 3 + 2 * k21 / 3 - k31 / 3 - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) / (16 * V * (-k / 3 - k12 / 3 - k13 / 3 - k21 / 3 - k31 / 3 + ka - 2 * cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3)) * pow(cos(acos(3 * sqrt(3) * (-k * k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) * (2 * k + 2 * k12 + 2 * k13 + 2 * k21 + 2 * k31) / 27 + (k + k12 + k13 + k21 + k31) * (k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31) / 3) / (2 * sqrt((-k * k21 - k * k31 - k12 * k31 - k13 * k21 - k21 * k31 + pow((k + k12 + k13 + k21 + k31), 2) / 3) * pow((k * k21 + k * k31 + k12 * k31 + k13 * k21 + k21 * k31 - pow((k + k12 + k13 + k21 + k31), 2) / 3), 2)))) / 3), 2));

    e["dV"] = dV;
    e["dK"] = dK;
    e["dK21"] = dK21;
    e["dK31"] = dK31;
    e["dK13"] = dK13;
    e["dK12"] = dK12;
    e["dKA"] = dKA;

  } else {
    stop("Some required parameters not in environment (need V, K, K21, K31, K13, K12, KA)");
  }
}

if (par == 3 && ncmt == 2 && oral == 0){

  if (e.exists("V") && e.exists("CL") && e.exists("Q") && e.exists("VSS")){

    double V = as<double>(e["V"]);
    double CL = as<double>(e["CL"]);
    double Q = as<double>(e["Q"]);
    double VSS = as<double>(e["VSS"]);

    mat dV = mat(2, 2);
    mat dCL = mat(2, 2);
    mat dQ = mat(2, 2);
    mat dVSS = mat(2, 2);

    dV(1, 0) = -0.5 * CL / pow(V, 2) + 0.5 * Q / pow((-V + VSS), 2) - 0.5 * Q / pow(V, 2) - 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2));

    dV(0, 0) = CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dV(0, 1) = (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (-CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / pow(V, 2) + 0.5 * Q / pow((-V + VSS), 2) - 0.5 * Q / pow(V, 2) - 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + (CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / pow((-V + VSS), 2)) / (V * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) / (pow(V, 2) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dV(1, 1) = (-0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) - 0.5 * Q / pow(V, 2) - 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (pow(V, 2) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dCL(1, 0) = -0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / V;

    dCL(0, 0) = CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dCL(0, 1) = (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (-CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / V) / (V * pow((CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + (CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))))) / (V * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dCL(1, 1) = (-0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / V) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2));

    dQ(1, 0) = -0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / (-V + VSS) + 0.5 / V;

    dQ(0, 0) = CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dQ(0, 1) = (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (-CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / (-V + VSS) + 0.5 / V) / (V * pow((CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + (CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 1 / (-V + VSS)) / (V * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dQ(1, 1) = (-0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) + 0.5 / V) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2));

    dVSS(1, 0) = -0.5 * Q / pow((-V + VSS), 2) - 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2));

    dVSS(0, 0) = CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dVSS(0, 1) = (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (-CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * Q / pow((-V + VSS), 2) - 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + (CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + Q / pow((-V + VSS), 2)) / (V * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dVSS(1, 1) = (0.5 * Q / pow((-V + VSS), 2) - 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2));

    e["dV"] = dV;
    e["dCL"] = dCL;
    e["dQ"] = dQ;
    e["dVSS"] = dVSS;

  } else {
    stop("Some required parameters not in environment (need V, CL, Q, VSS)");
  }
}

if (par == 3 && ncmt == 2 && oral == 1){

  if (e.exists("V") && e.exists("CL") && e.exists("Q") && e.exists("VSS") && e.exists("KA")){

    double V = as<double>(e["V"]);
    double CL = as<double>(e["CL"]);
    double Q = as<double>(e["Q"]);
    double VSS = as<double>(e["VSS"]);
    double ka = as<double>(e["KA"]);

    mat dV = mat(2, 2);
    mat dCL = mat(2, 2);
    mat dQ = mat(2, 2);
    mat dVSS = mat(2, 2);
    mat dKA = mat(2, 2);

    dV(1, 0) = -0.5 * CL / pow(V, 2) + 0.5 * Q / pow((-V + VSS), 2) - 0.5 * Q / pow(V, 2) - 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2));

    dV(0, 0) = CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dV(0, 1) = ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (-CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / pow(V, 2) + 0.5 * Q / pow((-V + VSS), 2) - 0.5 * Q / pow(V, 2) - 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * pow((CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + ka * (CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / pow((-V + VSS), 2)) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))))) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka), 2) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) / (pow(V, 2) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dV(1, 1) = ka * (-0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) - 0.5 * Q / pow(V, 2) - 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (-0.5 * CL / pow(V, 2) + 0.5 * Q / pow((-V + VSS), 2) - 0.5 * Q / pow(V, 2) - 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (CL * Q * (0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - CL * Q / (pow(V, 2) * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / pow(V, 2) - 0.5 * Q / pow((-V + VSS), 2) + 0.5 * Q / pow(V, 2) + 0.5 * (-2 * CL * Q / (V * pow((-V + VSS), 2)) + 2 * CL * Q / (pow(V, 2) * (-V + VSS)) + (-2 * CL / pow(V, 2) + 2 * Q / pow((-V + VSS), 2) - 2 * Q / pow(V, 2)) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - ka * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (pow(V, 2) * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dCL(1, 0) = -0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / V;

    dCL(0, 0) = CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dCL(0, 1) = ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (-CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / V) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * pow((CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + ka * (CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))))) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))))) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka), 2) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dCL(1, 1) = ka * (-0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / V) * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (-0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / V) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (CL * Q * (0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * (-2 * Q / (V * (-V + VSS)) + (CL / V + Q / (-V + VSS) + Q / V) / V) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / V) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2));

    dQ(1, 0) = -0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / (-V + VSS) + 0.5 / V;

    dQ(0, 0) = CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dQ(0, 1) = ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (-CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / (-V + VSS) + 0.5 / V) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * pow((CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + ka * (CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 1 / (-V + VSS)) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))))) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka), 2) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dQ(1, 1) = ka * (-0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) + 0.5 / V) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (-0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) + 0.5 / (-V + VSS) + 0.5 / V) * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (CL * Q * (0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * (-2 * CL / (V * (-V + VSS)) + (2 / (-V + VSS) + 2 / V) * (CL / V + Q / (-V + VSS) + Q / V) / 2) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)) - 0.5 / (-V + VSS) - 0.5 / V) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2));

    dVSS(1, 0) = -0.5 * Q / pow((-V + VSS), 2) - 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2));

    dVSS(0, 0) = CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dVSS(0, 1) = ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (-CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * Q / pow((-V + VSS), 2) - 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * pow((CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) + ka * (CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + Q / pow((-V + VSS), 2)) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) * (CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))))) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka), 2) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dVSS(1, 1) = ka * (-0.5 * Q / pow((-V + VSS), 2) - 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (0.5 * Q / pow((-V + VSS), 2) - 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (CL * Q * (0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-V + VSS) * pow((0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2)) - CL * Q / (V * pow((-V + VSS), 2) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * Q / pow((-V + VSS), 2) + 0.5 * (2 * CL * Q / (V * pow((-V + VSS), 2)) - Q * (CL / V + Q / (-V + VSS) + Q / V) / pow((-V + VSS), 2)) / sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2));

    dKA(1, 0) = 0;

    dKA(0, 0) = 0;

    dKA(0, 1) = -ka * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) / (V * pow((-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka), 2) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - Q / (-V + VSS)) / (V * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + ka) * (CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) - 0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    dKA(1, 1) = -ka * (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * pow((-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))), 2) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + (0.5 * CL / V - 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) / (V * (-0.5 * CL / V - 0.5 * Q / (-V + VSS) - 0.5 * Q / V + ka + 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))) * (-CL * Q / (V * (-V + VSS) * (0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2)))) + 0.5 * CL / V + 0.5 * Q / (-V + VSS) + 0.5 * Q / V - 0.5 * sqrt(-4 * CL * Q / (V * (-V + VSS)) + pow((CL / V + Q / (-V + VSS) + Q / V), 2))));

    e["dV"] = dV;
    e["dCL"] = dCL;
    e["dQ"] = dQ;
    e["dVSS"] = dVSS;
    e["dKA"] = dKA;

  } else {
    stop("Some required parameters not in environment (need V, CL, Q, VSS, KA)");
  }
}

if (par == 4 && ncmt == 2 && oral == 0){

  if (e.exists("V") && e.exists("AOB") && e.exists("BETA") && e.exists("ALPHA")){

    double V = as<double>(e["V"]);
    double aob = as<double>(e["AOB"]);
    double betaP = as<double>(e["BETA"]);
    double alphaP = as<double>(e["ALPHA"]);

    mat dV = mat(2, 2);
    mat dAOB = mat(2, 2);
    mat dBETA = mat(2, 2);
    mat dALPHA = mat(2, 2);

    dV(1, 0) = 0;

    dV(0, 0) = 0;

    dV(0, 1) = -(alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - (alphaP + aob * betaP) / (aob + 1)) / (pow(V, 2) * (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dV(1, 1) = -(0.5 * alphaP + 0.5 * betaP - (alphaP + aob * betaP) / (aob + 1) - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) / (pow(V, 2) * (-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dAOB(1, 0) = 0;

    dAOB(0, 0) = 0;

    dAOB(0, 1) = (-betaP / (aob + 1) + (alphaP + aob * betaP) / pow((aob + 1), 2)) / (V * (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dAOB(1, 1) = (-betaP / (aob + 1) + (alphaP + aob * betaP) / pow((aob + 1), 2)) / (V * (-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dBETA(1, 0) = -0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5;

    dBETA(0, 0) = alphaP * betaP * (0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + alphaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)));

    dBETA(0, 1) = (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - (alphaP + aob * betaP) / (aob + 1)) * (-alphaP * betaP * (0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) - alphaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5) / (V * pow((alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2)) + (alphaP * betaP * (0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + alphaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - aob / (aob + 1)) / (V * (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dBETA(1, 1) = (-aob / (aob + 1) - 0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5) / (V * (-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)))) + (0.5 * alphaP + 0.5 * betaP - (alphaP + aob * betaP) / (aob + 1) - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) * (alphaP * betaP * (0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + alphaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / (V * pow((-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2));

    dALPHA(1, 0) = -0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5;

    dALPHA(0, 0) = alphaP * betaP * (0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)));

    dALPHA(0, 1) = (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - (alphaP + aob * betaP) / (aob + 1)) * (-alphaP * betaP * (0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) - betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5) / (V * pow((alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2)) + (alphaP * betaP * (0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 1 / (aob + 1)) / (V * (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dALPHA(1, 1) = (-0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5 - 1 / (aob + 1)) / (V * (-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)))) + (0.5 * alphaP + 0.5 * betaP - (alphaP + aob * betaP) / (aob + 1) - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) * (alphaP * betaP * (0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / (V * pow((-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2));

    e["dV"] = dV;
    e["dAOB"] = dAOB;
    e["dBETA"] = dBETA;
    e["dALPHA"] = dALPHA;

  } else {
    stop("Some required parameters not in environment (need V, AOB, BETA, ALPHA)");
  }
}

if (par == 4 && ncmt == 2 && oral == 0){

  if (e.exists("V") && e.exists("AOB") && e.exists("BETA") && e.exists("ALPHA")){

    double V = as<double>(e["V"]);
    double aob = as<double>(e["AOB"]);
    double betaP = as<double>(e["BETA"]);
    double alphaP = as<double>(e["ALPHA"]);

    mat dV = mat(2, 2);
    mat dAOB = mat(2, 2);
    mat dBETA = mat(2, 2);
    mat dALPHA = mat(2, 2);

    dV(1, 0) = 0;

    dV(0, 0) = 0;

    dV(0, 1) = -(alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - (alphaP + aob * betaP) / (aob + 1)) / (pow(V, 2) * (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dV(1, 1) = -(0.5 * alphaP + 0.5 * betaP - (alphaP + aob * betaP) / (aob + 1) - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) / (pow(V, 2) * (-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dAOB(1, 0) = 0;

    dAOB(0, 0) = 0;

    dAOB(0, 1) = (-betaP / (aob + 1) + (alphaP + aob * betaP) / pow((aob + 1), 2)) / (V * (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dAOB(1, 1) = (-betaP / (aob + 1) + (alphaP + aob * betaP) / pow((aob + 1), 2)) / (V * (-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dBETA(1, 0) = -0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5;

    dBETA(0, 0) = alphaP * betaP * (0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + alphaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)));

    dBETA(0, 1) = (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - (alphaP + aob * betaP) / (aob + 1)) * (-alphaP * betaP * (0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) - alphaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5) / (V * pow((alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2)) + (alphaP * betaP * (0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + alphaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - aob / (aob + 1)) / (V * (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dBETA(1, 1) = (-aob / (aob + 1) - 0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5) / (V * (-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)))) + (0.5 * alphaP + 0.5 * betaP - (alphaP + aob * betaP) / (aob + 1) - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) * (alphaP * betaP * (0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + alphaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * (-alphaP + betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / (V * pow((-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2));

    dALPHA(1, 0) = -0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5;

    dALPHA(0, 0) = alphaP * betaP * (0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)));

    dALPHA(0, 1) = (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - (alphaP + aob * betaP) / (aob + 1)) * (-alphaP * betaP * (0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) - betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5) / (V * pow((alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2)) + (alphaP * betaP * (0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 1 / (aob + 1)) / (V * (alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) - 0.5 * alphaP - 0.5 * betaP + 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))));

    dALPHA(1, 1) = (-0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) + 0.5 - 1 / (aob + 1)) / (V * (-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)))) + (0.5 * alphaP + 0.5 * betaP - (alphaP + aob * betaP) / (aob + 1) - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) * (alphaP * betaP * (0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / pow((0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2) + betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * (alphaP - betaP) / sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2)) - 0.5) / (V * pow((-alphaP * betaP / (0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))) + 0.5 * alphaP + 0.5 * betaP - 0.5 * sqrt(-4 * alphaP * betaP + pow((alphaP + betaP), 2))), 2));

    e["dV"] = dV;
    e["dAOB"] = dAOB;
    e["dBETA"] = dBETA;
    e["dALPHA"] = dALPHA;

  } else {
    stop("Some required parameters not in environment (need V, AOB, BETA, ALPHA)");
  }
}

if (par == 5 && ncmt == 2 && oral == 0){

  if (e.exists("V") && e.exists("BETA") && e.exists("ALPHA") && e.exists("K21")){

    double V = as<double>(e["V"]);
    double betap = as<double>(e["BETA"]);
    double alphap = as<double>(e["ALPHA"]);
    double k21p = as<double>(e["K21"]);

    mat dV = mat(2, 2);
    mat dBETA = mat(2, 2);
    mat dALPHA = mat(2, 2);
    mat dK21 = mat(2, 2);

    dV(1, 0) = 0;

    dV(0, 0) = 0;

    dV(0, 1) = -(alphap - k21p) / (pow(V, 2) * (alphap - betap));

    dV(1, 1) = -(betap - k21p) / (pow(V, 2) * (-alphap + betap));

    dBETA(1, 0) = 1;

    dBETA(0, 0) = 0;

    dBETA(0, 1) = (alphap - k21p) / (V * pow((alphap - betap), 2));

    dBETA(1, 1) = 1 / (V * (-alphap + betap)) - (betap - k21p) / (V * pow((-alphap + betap), 2));

    dALPHA(1, 0) = 0;

    dALPHA(0, 0) = 1;

    dALPHA(0, 1) = 1 / (V * (alphap - betap)) - (alphap - k21p) / (V * pow((alphap - betap), 2));

    dALPHA(1, 1) = (betap - k21p) / (V * pow((-alphap + betap), 2));

    dK21(1, 0) = 0;

    dK21(0, 0) = 0;

    dK21(0, 1) = -1 / (V * (alphap - betap));

    dK21(1, 1) = -1 / (V * (-alphap + betap));

    e["dV"] = dV;
    e["dBETA"] = dBETA;
    e["dALPHA"] = dALPHA;
    e["dK21"] = dK21;

  } else {
    stop("Some required parameters not in environment (need V, BETA, ALPHA, K21)");
  }
}

if (par == 5 && ncmt == 2 && oral == 0){

  if (e.exists("V") && e.exists("BETA") && e.exists("ALPHA") && e.exists("K21")){

    double V = as<double>(e["V"]);
    double betap = as<double>(e["BETA"]);
    double alphap = as<double>(e["ALPHA"]);
    double k21p = as<double>(e["K21"]);

    mat dV = mat(2, 2);
    mat dBETA = mat(2, 2);
    mat dALPHA = mat(2, 2);
    mat dK21 = mat(2, 2);

    dV(1, 0) = 0;

    dV(0, 0) = 0;

    dV(0, 1) = -(alphap - k21p) / (pow(V, 2) * (alphap - betap));

    dV(1, 1) = -(betap - k21p) / (pow(V, 2) * (-alphap + betap));

    dBETA(1, 0) = 1;

    dBETA(0, 0) = 0;

    dBETA(0, 1) = (alphap - k21p) / (V * pow((alphap - betap), 2));

    dBETA(1, 1) = 1 / (V * (-alphap + betap)) - (betap - k21p) / (V * pow((-alphap + betap), 2));

    dALPHA(1, 0) = 0;

    dALPHA(0, 0) = 1;

    dALPHA(0, 1) = 1 / (V * (alphap - betap)) - (alphap - k21p) / (V * pow((alphap - betap), 2));

    dALPHA(1, 1) = (betap - k21p) / (V * pow((-alphap + betap), 2));

    dK21(1, 0) = 0;

    dK21(0, 0) = 0;

    dK21(0, 1) = -1 / (V * (alphap - betap));

    dK21(1, 1) = -1 / (V * (-alphap + betap));

    e["dV"] = dV;
    e["dBETA"] = dBETA;
    e["dALPHA"] = dALPHA;
    e["dK21"] = dK21;

  } else {
    stop("Some required parameters not in environment (need V, BETA, ALPHA, K21)");
  }
}
}
