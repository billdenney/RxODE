#define __HD_ODE__ "#include <R.h>\n#include <Rinternals.h>\n#include <Rmath.h>\n#include <R_ext/Rdynload.h>\n#define JAC_Rprintf Rprintf\n#define JAC0_Rprintf if (jac_counter_val() == 0) Rprintf\n#define ODE_Rprintf Rprintf\n#define ODE0_Rprintf if (dadt_counter_val() == 0) Rprintf\n#define LHS_Rprintf Rprintf\n#define max(a,b) (((a)>(b))?(a):(b))\n#define min(a,b) (((a)<(b))?(a):(b))\n// Types for par pointers.r\ntypedef void (*RxODE_update_par_ptr)(double t);\ntypedef double (*RxODE_transit3)(double t, double n, double mtt);\ntypedef double (*RxODE_fn) (double x);\ntypedef double (*RxODE_fn2) (double x, double y);\ntypedef double (*RxODE_transit4)(double t, double n, double mtt, double bio);\ntypedef double (*RxODE_vec) (int val);\ntypedef long (*RxODE_cnt) ();\ntypedef void (*RxODE_inc) ();\ntypedef double (*RxODE_val) ();\ntypedef SEXP (*RxODE_ode_solver) (SEXP sexp_theta, SEXP sexp_inits, SEXP sexp_lhs, SEXP sexp_time, SEXP sexp_evid,SEXP sexp_dose, SEXP sexp_pcov, SEXP sexp_cov, SEXP sexp_locf, SEXP sexp_atol, SEXP sexp_rtol, SEXP sexp_hmin, SEXP sexp_hmax, SEXP sexp_h0, SEXP sexp_mxordn, SEXP sexp_mxords, SEXP sexp_mx,SEXP sexp_stiff, SEXP sexp_transit_abs, SEXP sexp_object, SEXP sexp_extra_args);\ntypedef void (*RxODE_assign_fn_pointers)(void (*fun_dydt)(unsigned int, double, double *, double *),void (*fun_calc_lhs)(double, double *, double *),void (*fun_calc_jac)(unsigned int, double, double *, double *, unsigned int),int fun_jt,int fun_mf, int fun_debug);\n\ntypedef void (*RxODE_ode_solver_old_c)(int *neq,double *theta,double *time,int *evid,int *ntime,double *inits,double *dose,double *ret,double *atol,double *rtol,int *stiff,int *transit_abs,int *nlhs,double *lhs,int *rc);\ntypedef void (*RxODE_ode_solver_0_6_c)(int *neq,double *theta,double *time,int *evid,int *ntime,double *inits,double *dose,double *ret,double *atol,double *rtol,int *stiff,int *transit_abs,int *nlhs,double *lhs,int *rc,double hmin, double hmax,double h0,int mxordn,int mxords,int mxstep);\n// Give par pointers\nRxODE_vec par_ptr, InfusionRate;\nRxODE_update_par_ptr update_par_ptr;\nRxODE_cnt dadt_counter_val, jac_counter_val;\nRxODE_inc dadt_counter_inc, jac_counter_inc;\nRxODE_val podo, tlast;\nRxODE_transit4 transit4;\nRxODE_transit3 transit3;\nRxODE_fn factorial;\nRxODE_fn2 polygamma;\nRxODE_fn2 besseli;\nRxODE_fn2 besselj;\nRxODE_fn2 besselk;\nRxODE_fn2 bessely;\nRxODE_assign_fn_pointers assign_fn_pointers;\nRxODE_ode_solver_old_c old_c;\nRxODE_ode_solver_0_6_c c_0_6;\n\n\n"
#define __HD_SOLVE__ "void __ODE_SOLVER__(\n                    int *neq,\n                    double *theta,      //order:\n                    double *time,\n                    int *evid,\n                    int *ntime,\n                    double *inits,\n                    double *dose,\n                    double *ret,\n                    double *atol,\n                    double *rtol,\n                    int *stiff,\n                    int *transit_abs,\n                    int *nlhs,\n                    double *lhs,\n                    int *rc\n                    ){\n  // Backward compatible ode solver for 0.5* C interface\n  assign_fn_pointers(__DYDT__ , __CALC_LHS__ , __CALC_JAC__, __JT__ , __MF__,\n#ifdef __DEBUG__\n                     1\n#else\n                     0\n#endif\n                     );\n  old_c(neq, theta, time, evid, ntime, inits, dose, ret, atol, rtol, stiff, transit_abs, nlhs, lhs, rc);\n}\n\nvoid __ODE_SOLVER_0_6__(int *neq,\n                        double *theta,  //order:\n                        double *time,\n                        int *evid,\n                        int *ntime,\n                        double *inits,\n                        double *dose,\n                        double *ret,\n                        double *atol,\n                        double *rtol,\n                        int *stiff,\n                        int *transit_abs,\n                        int *nlhs,\n                        double *lhs,\n                        int *rc,\n                        double hmin,\n                        double hmax,\n                        double h0,\n                        int mxordn,\n                        int mxords,\n                        int mxstep) {\n  // Backward compatible ode solver for 0.5* C interface\n  assign_fn_pointers(__DYDT__ , __CALC_LHS__ , __CALC_JAC__, __JT__ , __MF__,\n#ifdef __DEBUG__\n                     1\n#else\n                     0\n#endif\n                     );\n  c_0_6(neq, theta, time, evid, ntime, inits, dose, ret, atol, rtol, stiff, transit_abs, nlhs, lhs, rc,\n	hmin, hmax, h0, mxordn, mxords, mxstep);\n}\n\nextern SEXP __ODE_SOLVER_SEXP__ (// Parameters\n                                 SEXP sexp_theta,\n                                 SEXP sexp_inits,\n                                 SEXP sexp_lhs,\n				 // Events\n				 SEXP sexp_time,\n				 SEXP sexp_evid,\n				 SEXP sexp_dose,\n				 // Covariates\n				 SEXP sexp_pcov,\n				 SEXP sexp_cov,\n				 SEXP sexp_locf,\n				 // Solver Options\n				 SEXP sexp_atol,\n				 SEXP sexp_rtol,\n				 SEXP sexp_hmin,\n				 SEXP sexp_hmax,\n				 SEXP sexp_h0,\n				 SEXP sexp_mxordn,\n				 SEXP sexp_mxords,\n				 SEXP sexp_mx,\n				 SEXP sexp_stiff,\n				 SEXP sexp_transit_abs,\n				 // Object Creation\n				 SEXP sexp_object,\n				 SEXP sexp_extra_args){\n  RxODE_ode_solver ode_solver=(RxODE_ode_solver) R_GetCCallable(\"RxODE\",\"RxODE_ode_solver\");\n  assign_fn_pointers(__DYDT__ , __CALC_LHS__ , __CALC_JAC__, __JT__ , __MF__,\n#ifdef __DEBUG__\n                     1\n#else\n                     0\n#endif\n		     );\n  ode_solver(sexp_theta,sexp_inits,sexp_lhs,sexp_time,sexp_evid,sexp_dose,sexp_pcov,sexp_cov,sexp_locf,sexp_atol,\n	     sexp_rtol,sexp_hmin,sexp_hmax,sexp_h0,sexp_mxordn,sexp_mxords,sexp_mx,sexp_stiff,sexp_transit_abs,\n	     sexp_object,sexp_extra_args);\n}\n\n//Initilize the dll to match RxODE's calls\nvoid __R_INIT__ (DllInfo *info){\n  // Get the RxODE calling interfaces\n  InfusionRate   = (RxODE_vec) R_GetCCallable(\"RxODE\",\"RxODE_InfusionRate\");\n  update_par_ptr = (RxODE_update_par_ptr) R_GetCCallable(\"RxODE\",\"RxODE_update_par_ptr\");\n  par_ptr = (RxODE_vec) R_GetCCallable(\"RxODE\",\"RxODE_par_ptr\");\n  dadt_counter_val = (RxODE_cnt) R_GetCCallable(\"RxODE\",\"RxODE_dadt_counter_val\");\n  jac_counter_val  = (RxODE_cnt) R_GetCCallable(\"RxODE\",\"RxODE_jac_counter_val\");\n  dadt_counter_inc = (RxODE_inc) R_GetCCallable(\"RxODE\",\"RxODE_dadt_counter_inc\");\n  jac_counter_inc  = (RxODE_inc) R_GetCCallable(\"RxODE\",\"RxODE_jac_counter_inc\");\n  podo  = (RxODE_val) R_GetCCallable(\"RxODE\",\"RxODE_podo\");\n  tlast = (RxODE_val) R_GetCCallable(\"RxODE\",\"RxODE_tlast\");\n  transit3 = (RxODE_transit3) R_GetCCallable(\"RxODE\",\"RxODE_transit3\");\n  transit4 = (RxODE_transit4) R_GetCCallable(\"RxODE\",\"RxODE_transit4\");\n  factorial=(RxODE_fn) R_GetCCallable(\"RxODE\",\"RxODE_factorial\");\n  polygamma=(RxODE_fn2) R_GetCCallable(\"RxODE\",\"RxODE_polygamma\");\n  besseli=(RxODE_fn2) R_GetCCallable(\"RxODE\",\"RxODE_besseli\");\n  besselj=(RxODE_fn2) R_GetCCallable(\"RxODE\",\"RxODE_besselj\");\n  besselk=(RxODE_fn2) R_GetCCallable(\"RxODE\",\"RxODE_besselk\");\n  bessely=(RxODE_fn2) R_GetCCallable(\"RxODE\",\"RxODE_bessely\");\n  assign_fn_pointers=(RxODE_assign_fn_pointers) R_GetCCallable(\"RxODE\",\"RxODE_assign_fn_pointers\");\n  old_c = (RxODE_ode_solver_old_c) R_GetCCallable(\"RxODE\",\"RxODE_ode_solver_old_c\");\n  c_0_6 = (RxODE_ode_solver_0_6_c)R_GetCCallable(\"RxODE\",\"RxODE_ode_solver_0_6_c\");\n  // Register the outside functions\n  R_RegisterCCallable(__LIB_STR__,__ODE_SOLVER_STR__,       (DL_FUNC) __ODE_SOLVER__);\n  R_RegisterCCallable(__LIB_STR__,__ODE_SOLVER_SEXP_STR__,  (DL_FUNC) __ODE_SOLVER_SEXP__);\n  R_RegisterCCallable(__LIB_STR__,__ODE_SOLVER_0_6_STR__,   (DL_FUNC) __ODE_SOLVER_0_6__);\n  // Register the function pointers so if someone directly calls the\n  // ode solvers directly, they use the last loaded RxODE model.\n  assign_fn_pointers(__DYDT__ , __CALC_LHS__ , __CALC_JAC__, __JT__ , __MF__,\n#ifdef __DEBUG__\n				       1\n#else\n				       0\n#endif\n				       );\n  \n}\n"
