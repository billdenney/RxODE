% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rxrandom.R
\name{rxnorm}
\alias{rxnorm}
\alias{rxnormV}
\title{Simulate random normal variable from threefry/vandercorput generator}
\usage{
rxnorm(mean = 0, sd = 1, n = 1L, ncores = 1L)

rxnormV(mean = 0, sd = 1, n = 1L, ncores = 1L)
}
\arguments{
\item{mean}{vector of means.}

\item{sd}{vector of standard deviations.}

\item{n}{number of observations}

\item{ncores}{Number of cores for the simulation

`rxnorm` simulates using the threefry sitmo generator; `rxnormV`
uses the vandercorput generator}
}
\description{
Care should be taken with this method not to encounter the
birthday problem, described
\url{https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/}.
Since the \code{sitmo} \code{threefry}, this currently generates
one random deviate from the uniform distribution to seed the
engine \code{threefry} and then run the code.
}
\details{
Therefore, a simple call to the random number generated followed by a second
call to random number generated may have identical seeds.  As the number of
random number generator calls are increased the probability that the
birthday problem will increase.

The key to avoid this problem is to run all simulations in the
`RxODE` environment once (therefore one seed or series of seeds
for the whole simulation) or to pre-generate all random variables
used for the simulation.

Also care should be made that the computer you will be running on
can run the same number of cores as you are running so they can
reproduce your results.
}
\examples{

## Use threefry engine

rxnorm(n=10) # with rxnorm you have to explicitly state n
rxnorm(n=10,ncores=2) # You can parallelize the simulation using openMP

rxnorm(2,3) ## The first 2 arguments are the mean and standard deviation


## This example uses `rxnorm` directly in the model

rx <- RxODE({
  a = rxnorm()
})

et <- et(1,id=1:2)

s <- rxSolve(rx,et)

## Use vandercorput generator

rxnormV(n=10) # with rxnorm you have to explicitly state n
rxnormV(n=10,ncores=2) # You can parallelize the simulation using openMP

rxnormV(2,3) ## The first 2 arguments are the mean and standard deviation


## This example uses `rxnormV` directly in the model

rx <- RxODE({
  a = rxnormV()
})

et <- et(1,id=1:2)

s <- rxSolve(rx,et)

}
